// Types
declare namespace Squash {
	/** A string of unique characters that represent the basis of other strings. */
	export type Alphabet = string & {
		/** @hidden @deprecated */
		readonly _nominal_alphabet: unique symbol;
	};

	/** The number of bytes used to represent a number. */
	export type Bytes = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

	/** The number of bytes used to represent a floating point number. */
	export type FloatBytes = 4 | 8;

	/** A function that serializes a number into a string. Usually this is Squash's uint, int, or number ser methods. */
	export type NumberSer = (x: number, bytes?: Bytes) => string;

	/** A function that deserializes a number from a string. Usually this is Squash's uint, int, or number des methods. */
	export type NumberDes = (y: string, bytes?: Bytes) => number;

	export interface NumberSerDes {
		ser: NumberSer;
		des: NumberDes;
	}

	export interface SquashRaycastResult {
		Material: Enum.Material;
		Distance: number;
		Position: Vector3;
		Normal: Vector3;
	}

	interface Ser<T extends defined, A extends Array<any>> {
		ser(this: void, x: T, ...args: A): string;
		serarr(this: void, x: ReadonlyArray<T>, ...args: A): string;
	}

	interface Des<T extends defined, A extends Array<any>> {
		des(this: void, y: string, ...args: A): T;
		desarr(this: void, y: string, ...args: A): Array<T>;
	}

	type Serdes<T extends defined, A extends Array<any>> = Ser<T, A> & Des<T, A>;
}

// Properties
declare namespace Squash {
	/** The delimiter used to separate strings or other types in variable sized arrays and act as the 0 element for base conversions. */
	export const delimiter: string;

	/** All digits in base 2. */
	export const binary: Alphabet;

	/** All digits in base 8. */
	export const octal: Alphabet;

	/** All digits in base 10. */
	export const decimal: Alphabet;

	/** All digits in base 12. */
	export const duodecimal: Alphabet;

	/** All digits in base 16. */
	export const hexadecimal: Alphabet;

	/** All digits in base 256. The UTF-8 character set. */
	export const utf8: Alphabet;

	/** All lowercase letters in the english language. */
	export const lower: Alphabet;

	/** All uppercase letters in the english language. */
	export const upper: Alphabet;

	/** All letters in the english language. */
	export const letters: Alphabet;

	/** All punctuation symbols in the english language. */
	export const punctuation: Alphabet;

	/** All symbols in the english language. */
	export const english: Alphabet;

	/** All characters that may be used in a filepath. */
	export const filepath: Alphabet;

	/** All characters that will not be expanded when JSONEncoded. */
	export const datastore: Alphabet;
}

// Luau Primitives
declare namespace Squash {
	export const string: Serdes<string, [alphabet?: Alphabet]> & {
		/** Maps a string to the smallest sorted alphabet that represents it. */
		alphabet(this: void, source: string): Alphabet;

		/** Converts a string from one alphabet to another. */
		convert(this: void, x: string, inAlphabet: Alphabet, outAlphabet: Alphabet): string;
	};

	export const number: Serdes<number, [bytes?: FloatBytes]>;

	export const uint: Serdes<number, [bytes?: Bytes]>;

	export const int: Serdes<number, [bytes?: Bytes]>;

	export const boolean: {
		ser(this: void,
			x1?: boolean,
			x2?: boolean,
			x3?: boolean,
			x4?: boolean,
			x5?: boolean,
			x6?: boolean,
			x7?: boolean,
			x8?: boolean
		): string;
		des(this: void, y: string): LuaTuple<[boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean]>;
		serarr(this: void, x: ReadonlyArray<boolean>): string;
		desarr(this: void, y: string): Array<boolean>;
	};
}

// Roblox Data Types
declare namespace Squash {
	export const Axes: Serdes<Axes, []>;

	export const BrickColor: Serdes<BrickColor, []>;

	export const CFrame: Serdes<CFrame, [serdes?: NumberSerDes, posBytes?: Bytes]>;

	export const CatalogSearchParams: Serdes<CatalogSearchParams, [alphabet?: Alphabet]>;

	export const Color3: Serdes<Color3, []>;

	export const ColorSequence: Serdes<ColorSequence, []>;

	export const ColorSequenceKeypoint: Serdes<ColorSequenceKeypoint, []>;

	export const DateTime: Serdes<DateTime, []>;

	export const DockWidgetPluginGuiInfo: Serdes<DockWidgetPluginGuiInfo, []>;

	export const Enum: Serdes<Enum, []>;

	export const EnumItem: Ser<EnumItem, []> & Des<EnumItem, [Enum: Enum]>;

	export const Faces: Serdes<Faces, []>;

	export const FloatCurveKey: Serdes<FloatCurveKey, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Font: Serdes<Font, []>;

	export const NumberRange: Serdes<NumberRange, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const NumberSequence: Serdes<NumberSequence, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const NumberSequenceKeypoint: Serdes<NumberSequenceKeypoint, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const OverlapParams: Serdes<OverlapParams, []>;

	export const PathWaypoint: Serdes<PathWaypoint, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const PhysicalProperties: Serdes<PhysicalProperties, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Ray: Serdes<Ray, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const RaycastParams: Serdes<RaycastParams, []>;

	export const RaycastResult: Ser<RaycastResult, [serdes?: NumberSerDes, bytes?: Bytes]> &
		Des<SquashRaycastResult, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Rect: Serdes<Rect, [bytes?: Bytes]>;

	export const Region3: Serdes<Region3, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Region3int16: Serdes<Region3int16, []>;

	export const TweenInfo: Serdes<TweenInfo, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const UDim: Serdes<UDim, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const UDim2: Serdes<UDim2, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Vector2: Serdes<Vector2, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Vector2int16: Serdes<Vector2int16, []>;

	export const Vector3: Serdes<Vector3, [serdes?: NumberSerDes, bytes?: Bytes]>;

	export const Vector3int16: Serdes<Vector3int16, []>;
}

export = Squash;
